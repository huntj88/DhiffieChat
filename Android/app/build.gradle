plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.squareup.sqldelight'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def Properties getPropertiesOrNull(String name) {
    def propertiesFile = rootProject.file(name)

    if (propertiesFile.exists()) {
        def properties = new Properties()
        properties.load(new FileInputStream(propertiesFile))
        return properties
    }
    return null
}

def getVersionCode = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--first-parent', '--count', 'origin/master'
        standardOutput = stdout
    }
    println "version code: ${Integer.parseInt(stdout.toString().trim())}"
    return Integer.parseInt(stdout.toString().trim())
}

def getVersionName= { dhiffieEnv ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'bash', '../appVersion.sh', dhiffieEnv
        standardOutput = stdout
    }
    println "version name: ${stdout.toString().trim()}"
    return stdout.toString().trim()
}

def releaseProperties = getPropertiesOrNull("release.properties")

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "me.jameshunt.dhiffiechat"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode getVersionCode()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    applicationVariants.all { variant ->
        if (variant.name == 'debug') {
            variant.outputs.each { output ->
                output.versionNameOverride = getVersionName("stage")
            }
        }

        if (variant.name == 'release') {
            variant.outputs.each { output ->
                output.versionNameOverride = getVersionName("prod")
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file("../debug.jks")
        }

        // allow debug builds to build if release.properties is not present
        if (releaseProperties != null) {
            releaseLocal {
                storeFile file(releaseProperties['storeFile'])
                storePassword releaseProperties['storePassword']
                keyAlias releaseProperties['keyAlias']
                keyPassword releaseProperties['keyPassword']
            }
        }
    }

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.0.2"
    }

    // kinda jank adding it this way instead of a module, but no syntax errors this way
    // TODO: revisit when the tooling catches up, add as module
    sourceSets {
        main.kotlin.srcDirs += '../../Crypto/src/main/kotlin'
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            signingConfig signingConfigs.debug
            def configProperties = getPropertiesOrNull("stageDhiffie.properties")
            buildConfigField "String", "BASE_URL", "\"${configProperties['BASE_URL']}\""
            buildConfigField "String", "SERVER_PUBLIC_KEY", "\"${configProperties['SERVER_PUBLIC_KEY']}\""
        }

        release {
            if (releaseProperties != null) {
                signingConfig signingConfigs.releaseLocal
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            def configProperties = getPropertiesOrNull("prodDhiffie.properties")
            buildConfigField "String", "BASE_URL", "\"${configProperties['BASE_URL']}\""
            buildConfigField "String", "SERVER_PUBLIC_KEY", "\"${configProperties['SERVER_PUBLIC_KEY']}\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

sqldelight {
    Database {
        packageName = "me.jameshunt.dhiffiechat"
        dialect = "sqlite:3.25"
    }
}


dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:$kotlin_version"))

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.github.kenglxn.QRGen:android:2.6.0'

    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"
    implementation "com.squareup.moshi:moshi:1.12.0"
    implementation "com.squareup.moshi:moshi-kotlin:1.12.0"
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'

    implementation 'com.google.mlkit:barcode-scanning:17.0.0'

    implementation 'androidx.lifecycle:lifecycle-common:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'

    implementation("io.reactivex.rxjava3:rxkotlin:3.0.1")
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    implementation "com.squareup.sqldelight:rxjava3-extensions:1.5.0"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.3.1"




    implementation 'com.google.android.exoplayer:exoplayer-core:2.15.0'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.15.0'

    def camerax_version = "1.1.0-alpha08"
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:1.0.0-alpha28"
    implementation "androidx.camera:camera-extensions:1.0.0-alpha28"

    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"


    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation "androidx.compose.runtime:runtime:1.1.0-alpha04"
    implementation 'androidx.compose.ui:ui:1.1.0-alpha04'
    implementation "androidx.compose.ui:ui-tooling:1.1.0-alpha04"
    implementation 'androidx.compose.material:material:1.1.0-alpha04'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0-beta01'
    implementation 'androidx.compose.runtime:runtime-livedata:1.1.0-alpha04'

    implementation "net.zetetic:android-database-sqlcipher:4.4.2"
    implementation "androidx.sqlite:sqlite-ktx:2.1.0"
    implementation "com.squareup.sqldelight:android-driver:1.5.0"
    implementation "com.squareup.sqldelight:coroutines-extensions-jvm:1.5.0"

    implementation platform('com.google.firebase:firebase-bom:28.0.1')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-messaging'


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}